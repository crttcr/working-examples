package xivvic.adt.pgraph.util.serdes;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.fail;

import org.apache.tinkerpop.gremlin.structure.Edge;
import org.apache.tinkerpop.gremlin.structure.Graph;
import org.apache.tinkerpop.gremlin.structure.Vertex;
import org.apache.tinkerpop.gremlin.tinkergraph.structure.TinkerGraph;
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import org.junit.Test;

import xivvic.adt.pgraph.util.TinkerElf;

public class GraphSerdeRoundTripTest
{
    Serde subject;

    // @Before
    // public void before()
    // {
    // }
    //

    @Test
    public void onRoundTrip_withSingleVertex_thenMatch() throws SerdeException
    {
	// Arrange
	//
	Graph input = sampleGraph(1, 0);

	// Act
	//
	byte[]   ser = Serde.serialize(input);
	Graph result = Serde.deserialize(ser);
	
	System.out.println(ser);

	// Assert
	//
	assertNotNull(result);
//	assertGraphsMatch(input, result);
    }

    ////////////////////////////
    // Helpers //
    ////////////////////////////

    private void assertGraphsMatch(Graph a, Graph b)
    {
	if (a == null && b == null) return;
	if (a == null || b == null) fail("One graph is null, the other is not");
	
	Vertex[] va = TinkerElf.allVertices(a);
	Vertex[] vb = TinkerElf.allVertices(b);
	Edge[]   ea = TinkerElf.allEdges(a);
	Edge[]   eb = TinkerElf.allEdges(b);
	
	assertVertexCardinality(va, vb);
	assertEdgeCardinality(ea, eb);
	
	// FIXME: Need to test structure and content of graph, not just cardinality
	//
    }
    
    
    private void assertVertexCardinality(Vertex[] a, Vertex[] b)
    {
	if (a == null && b == null) return;
	if (a == null || b == null) fail("One array is null, the other is not");

	if (a.length != b.length)
	{
	    String fmt = "The graphs have different number of vertices: (a = %d, b = %d)";
	    String msg = String.format(fmt, a.length, b.length);
	    fail(msg);
	}
    }    
    
    private void assertEdgeCardinality(Edge[] a, Edge[] b)
    {
	if (a == null && b == null) return;
	if (a == null || b == null) fail("One array is null, the other is not");

	if (a.length != b.length)
	{
	    String fmt = "The graphs have different number of edges: (a = %d, b = %d)";
	    String msg = String.format(fmt, a.length, b.length);
	    fail(msg);
	}
    }    

    public Graph sampleGraph(int v, int e)
    {

	Graph rv = TinkerGraph.open();

	for (int i = 0; i < v; i++)
	{
	    String label = Integer.toString(i);
	    rv.addVertex(label);
	}

	return rv;
    }
    


}
